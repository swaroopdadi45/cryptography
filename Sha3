#include <stdio.h>
#include <stdint.h>

#define STATE_SIZE 25
#define BIT_LENGTH 1024

// Function to print the state matrix
void printState(uint64_t state[STATE_SIZE]) {
    for (int i = 0; i < STATE_SIZE; ++i) {
        printf("%016lX ", state[i]);
        if ((i + 1) % 5 == 0) {
            printf("\n");
        }
    }
}

// Function to check if all lanes in capacity portion have at least one nonzero bit
int allNonZero(uint64_t state[STATE_SIZE]) {
    for (int i = 0; i < STATE_SIZE; ++i) {
        if (i < (STATE_SIZE - BIT_LENGTH / 64)) {
            if (state[i] == 0) {
                return 0; // Found a lane in the capacity portion that is still zero
            }
        }
    }
    return 1; // All lanes in the capacity portion have at least one nonzero bit
}

int main() {
    uint64_t state[STATE_SIZE] = {0}; // Initializing the state matrix with zeros

    int round = 0;
    while (!allNonZero(state)) {
        // Simulating SHA-3 operations (permutation), ignoring actual operations
        // Here, we'll simply set the capacity lanes to non-zero values after every 10 rounds

        if (round % 10 == 0) {
            for (int i = 0; i < (STATE_SIZE - BIT_LENGTH / 64); ++i) {
                state[i] = 0xFFFFFFFFFFFFFFFF; // Setting capacity lanes to non-zero values
            }
        }

        round++;
    }

    printf("All lanes in the capacity portion have at least one nonzero bit after %d rounds.\n", round);

    return 0;
}
